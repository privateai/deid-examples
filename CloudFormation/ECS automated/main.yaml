Description: >
  This template deploys a VPC, with a pair of public and private subnets spread 
  across two Availabilty Zones. It deploys an Internet Gateway, with a default 
  route on the public subnets. It deploys a NAT Gateways and default routes for 
  in the private subnets.

  It then deploys a highly available ECS cluster using an AutoScaling Group, with 
  ECS hosts distributed across multiple Availability Zones. 

  Finally, it deploys the Private AI container published in Amazon ECR.

Parameters:
  AdminIpAddress:
    Type: String
    Description: This IP address (in CIDR notation) will be allowed to access the bastion host via SSH

  SSHKeyName:
    Type: String
    Description: Name of the SSH Key to connect to ECS Hosts

  TemplateFileBucketUri:
    Type: String
    Description: Uri for s3 bucket where customized template yaml are placed

Resources:
  NestedOutputs:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateFileBucketUri}/values.yaml"

  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://privateai-infrastructure.s3.amazonaws.com/ecs/vpc.yaml
      Parameters:
        EnvironmentName: !Ref AWS::StackName

  SecurityGroups:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPC
    Properties:
      TemplateURL: !Sub "${TemplateFileBucketUri}/security-groups.yaml"
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VPC: !GetAtt VPC.Outputs.VPC
        AdminIpAddress: !Ref AdminIpAddress

  BastionHost:
    Type: AWS::CloudFormation::Stack
    DependsOn: SecurityGroups
    Properties:
      TemplateURL: https://privateai-infrastructure.s3.amazonaws.com/ecs/bastion.yaml
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VPC: !GetAtt VPC.Outputs.VPC
        PublicSubnets: !GetAtt VPC.Outputs.PublicSubnets
        BastionSecurityGroup: !GetAtt SecurityGroups.Outputs.BastionSecurityGroup
        SSHKeyName: !Ref SSHKeyName

  LoadBalancer:
    Type: AWS::CloudFormation::Stack
    DependsOn: SecurityGroups
    Properties:
      TemplateURL: https://privateai-infrastructure.s3.amazonaws.com/ecs/load-balancer.yaml
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VPC: !GetAtt VPC.Outputs.VPC
        PublicSubnets: !GetAtt VPC.Outputs.PublicSubnets
        LoadBalancerSecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup

  Cluster:
    Type: AWS::CloudFormation::Stack
    DependsOn: SecurityGroups
    Properties:
      TemplateURL: !Sub "${TemplateFileBucketUri}/cluster.yaml"
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VPC: !GetAtt VPC.Outputs.VPC
        ECSHostSecurityGroup: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
        PrivateSubnets: !GetAtt VPC.Outputs.PrivateSubnets
        SSHKeyName: !Ref SSHKeyName

  Service:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - LoadBalancer
      - Cluster
    Properties:
      TemplateURL: !Sub "${TemplateFileBucketUri}/service.yaml"
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VPC: !GetAtt VPC.Outputs.VPC
        Cluster: !GetAtt Cluster.Outputs.Cluster
        TargetGroup: !GetAtt LoadBalancer.Outputs.TargetGroup
        ECSHostSecurityGroup: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
        PrivateSubnets: !GetAtt VPC.Outputs.PrivateSubnets
        ECSExecutionRole: !GetAtt Cluster.Outputs.ECSExecutionRole
        ECSTaskRole: !GetAtt Cluster.Outputs.ECSTaskRole

Outputs:
  PrivateAIUrl:
    Description: The URL endpoint for the Private AI service
    Value: !Join ["", ["http://", !GetAtt LoadBalancer.Outputs.LoadBalancerUrl]]
